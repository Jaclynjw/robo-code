#!/usr/bin/env python
import rospy
from interactive_markers.interactive_marker_server import InteractiveMarkerServer
from visualization_msgs.msg import InteractiveMarker, InteractiveMarkerControl, InteractiveMarkerFeedback
from visualization_msgs.msg import Marker
import math
from robot_api import Base  # 确保robot_api中的Base类实现了必要的方法

def make_button_marker(position, name, description, color):
    int_marker = InteractiveMarker()
    int_marker.header.frame_id = "base_link"
    int_marker.pose.position = position
    int_marker.scale = 0.2
    int_marker.name = name
    int_marker.description = description

    button_control = InteractiveMarkerControl()
    button_control.interaction_mode = InteractiveMarkerControl.BUTTON
    button_control.always_visible = True

    box_marker = Marker()
    box_marker.type = Marker.CUBE
    box_marker.scale.x = 0.15
    box_marker.scale.y = 0.15
    box_marker.scale.z = 0.15
    box_marker.color.r = color[0]
    box_marker.color.g = color[1]
    box_marker.color.b = color[2]
    box_marker.color.a = 1.0
    button_control.markers.append(box_marker)
    int_marker.controls.append(button_control)

    return int_marker

def handle_viz_input(input, robot_base):
    rospy.loginfo(f"{input.marker_name} was clicked.")
    if input.marker_name == "forward_marker":
        robot_base.go_forward(0.5)  # 向前移动0.5米
    elif input.marker_name == "turn_left_marker":
        robot_base.turn(math.radians(30))  # 逆时针旋转30度
    elif input.marker_name == "turn_right_marker":
        robot_base.turn(math.radians(-30))  # 顺时针旋转30度

def main():
    rospy.init_node('interactive_marker_demo')
    server = InteractiveMarkerServer("simple_marker")
    robot_base = Base()

    forward_marker = make_button_marker(Point(0.6, 0, 0), "forward_marker", "Move Forward", [0.0, 0.5, 0.5])
    turn_left_marker = make_button_marker(Point(0, 0.3, 0), "turn_left_marker", "Turn Left", [0.5, 0.0, 0.5])
    turn_right_marker = make_button_marker(Point(0, -0.3, 0), "turn_right_marker", "Turn Right", [0.5, 0.5, 0.0])

    server.insert(forward_marker, lambda feedback: handle_viz_input(feedback, robot_base))
    server.insert(turn_left_marker, lambda feedback: handle_viz_input(feedback, robot_base))
    server.insert(turn_right_marker, lambda feedback: handle_viz_input(feedback, robot_base))

    server.applyChanges()
    rospy.spin()

if __name__ == "__main__":
    main()
